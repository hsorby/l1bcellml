
==================
Building libCellML
==================

This document covers building libCellML from source.  It is assumed that you already have the codebase downloaded and ready for building.  The variable ``LIBCELLML_SRC`` shall be used to refer to the directory containing the ``LICENSE`` file for libCellML.

Build Directory
===============

It is best to build libCellML outside of the source tree.  To this end create a build directory that is not the ``LIBCELLML_SRC`` directory.  A sibling directory of ``LIBCELLML_SRC`` is a good choice, named something like; ``build`` or ``libcellml-build``.  The variable ``LIBCELLML_BUILD`` shall be used to refer to the build directory.

Configuration
=============

The libCellML library uses the CMake build configuration tool to configure the library.  Version 3.2 or greater of CMake is required to configure libCellML.  Download and installation instructions are available from `CMake <http://www.cmake.org/>`_.

The configuration options for the library are detailed in the following table.  The command line options can be set with the ``-D`` flag, like so ``-DBUILD_TYPE=Release``.  Please note that in CMake GUI Configuration applications the config variable is prefixed with ``LIBCELLML_``

.. include:: dev_configuration_options.rst

.. Select a generator that is appropriate for your system, or let the CMake configuration application

From the command line (bash shell) libCellML can be configured to create an optimised shared object library like so::

   cd $LIBCELLML_BUILD
   cmake -DBUILD_TYPE=Release $LIBCELLML_SRC

Build
=====

Once the build scripts have been generated by CMake invoke the build with the appropriate command.  For Makefile based configurations the command is simply::

   make

If testing is enabled run the tests using the test target::

   make test

or using the ctest application::

   ctest

for a more verbose output run::

   ctest -V



