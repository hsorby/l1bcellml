name: libcellml-deploy-on-release

on:
  release:
    types: # This configuration does not affect the page_build event above
      - created

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: 10.14

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC Py38", deploy_libs: true,
            os: windows-latest, libxml2_dir: '-D "LibXml2_DIR=C:\\\\Program Files (x86)\\\\LibXml2\\\\LibXml2\\\\CMake\\\\"',
            zlib_dir: '-D "ZLIB_DIR=C:\\\\Program Files (x86)\\\\ZLIB\\\\lib\\\\cmake\\\\"',
            build_type: "Release", cc: "cl", cxx: "cl", python_version: 3.8,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MSVC Py37", deploy_libs: false,
            os: windows-latest, libxml2_dir: '-D "LibXml2_DIR=C:\\\\Program Files (x86)\\\\LibXml2\\\\LibXml2\\\\CMake\\\\"',
            zlib_dir: '-D "ZLIB_DIR=C:\\\\Program Files (x86)\\\\ZLIB\\\\lib\\\\cmake\\\\"',
            build_type: "Release", cc: "gcc", cxx: "g++", python_version: 3.7
          }
        - {
            name: "Ubuntu Latest GCC Py36", deploy_libs: true,
            os: ubuntu-latest, swig_executable: "-D SWIG_EXECUTABLE=/usr/local/bin/swig",
            build_type: "Release", cc: "gcc", cxx: "g++", python_version: 3.6
          }
        - {
            name: "macOS Latest Clang Py38", deploy_libs: true,
            os: macos-latest, python_rpath: "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.8/",
            build_type: "Release", cc: "clang", cxx: "clang++", python_version: 3.8
          }
        - {
            name: "macOS Latest Clang Py37", deploy_libs: false,
            os: macos-latest, python_rpath: "/usr/local/opt/python/Frameworks/Python.framework/Versions/3.7/",
            build_type: "Release", cc: "clang", cxx: "clang++", python_version: 3.7
          }

    steps:
    - name: Checkout libCellML
      uses: actions/checkout@v2

    - name: Checkout zlib
      uses: actions/checkout@v2
      with:
        repository: OpenCMISS-Dependencies/zlib
        path: zlib
        ref: develop

    - name: Checkout LibXml2
      uses: actions/checkout@v2
      with:
        repository: OpenCMISS-Dependencies/libxml2
        path: libxml2
        ref: v2.9.6

    - name: Set up Python ${{ matrix.config.python_version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python_version }}

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      if: runner.os == 'Windows'

    - name: Fetch swig
      shell: cmake -P {0}
      run: |
        # Fetch swig script.

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(swig_url "http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip")
          file(DOWNLOAD "${swig_url}" "${ACTION_DIR}/swigwin-4.0.2.zip" SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/swigwin-4.0.2.zip" WORKING_DIRECTORY "${ACTION_DIR}")

        else()
          set(swig_url "http://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz")
          file(DOWNLOAD "${swig_url}" "${ACTION_DIR}/swig-4.0.2.tar.gz" SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/swig-4.0.2.tar.gz")
        endif()

    - name: Prepare environment
      shell: cmake -P {0}
      run: |
        # Prepare environment script.

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(WIN_PATH)
          file(TO_CMAKE_PATH "$ENV{PATH}" ENV_PATH)
          set(PATH_LIST "")
          foreach(_PATH ${ENV_PATH})
            if (NOT "${_PATH}" MATCHES ".*Strawberry")
              list(APPEND WIN_PATH "${_PATH}")
            endif()
          endforeach()
          file(TO_NATIVE_PATH "${WIN_PATH}" WIN_PATH)
          set(ENV{PATH} "${WIN_PATH}")
          execute_process(COMMAND ${CMAKE_COMMAND} -S "${ACTION_DIR}/zlib" -B "${ACTION_DIR}/build-zlib")
          execute_process(COMMAND ${CMAKE_COMMAND} --build "${ACTION_DIR}/build-zlib" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-zlib")
          execute_process(COMMAND ${CMAKE_COMMAND} --install "${ACTION_DIR}/build-zlib" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-zlib")
          execute_process(COMMAND ${CMAKE_COMMAND} -S "${ACTION_DIR}/libxml2" -B "${ACTION_DIR}/build-libxml2" ${{ matrix.config.zlib_dir }}
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2")
          execute_process(COMMAND ${CMAKE_COMMAND} --build "${ACTION_DIR}/build-libxml2" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2")
          execute_process(COMMAND ${CMAKE_COMMAND} --install "${ACTION_DIR}/build-libxml2" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2")
        else()
          execute_process(COMMAND ./configure WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2")
          execute_process(COMMAND make WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2")
          execute_process(COMMAND sudo make install WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2")
        endif()

        if ("${{ runner.os }}" STREQUAL "macOS")
          execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${{ matrix.config.python_rpath }})
          execute_process(COMMAND ${CMAKE_COMMAND} -E remove ${{ matrix.config.python_rpath }}Python)
          file(GLOB _DYNAMIC_LIBRARY $ENV{pythonLocation}/lib/libpython*.dylib)
          message(STATUS "_FILES: ${_FILES}")
          message(STATUS "${CMAKE_COMMAND} -E create_symlink ${_DYNAMIC_LIBRARY} ${{ matrix.config.python_rpath }}Python")
          execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${_DYNAMIC_LIBRARY} ${{ matrix.config.python_rpath }}Python)
          set(PYTHON_EXE ${Python_EXECUTABLE})
        endif()


    - name: Configure
      shell: cmake -P {0}
      run: |
        # Configure library script
        set(OPTIONAL_ARGUMENTS)

        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        set(PYTHON_LOCATION $ENV{pythonLocation})

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(ENV{PATH} "${ACTION_DIR}/swigwin-4.0.2;$ENV{PATH}")
          file(TO_CMAKE_PATH "${PYTHON_LOCATION}/python.exe" PYTHON_EXE)
        else()
          list(APPEND OPTIONAL_ARGUMENTS -D BUILD_TYPE=$ENV{BUILD_TYPE})
        endif()

        list(APPEND OPTIONAL_ARGUMENTS ${{ matrix.config.swig_executable }})
        list(APPEND OPTIONAL_ARGUMENTS ${{ matrix.config.libxml2_dir }})

        execute_process(
          COMMAND ${CMAKE_COMMAND}
            -S .
            -B build
            -D Python_EXECUTABLE=${PYTHON_EXE}
            ${OPTIONAL_ARGUMENTS}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Configure failed.")
        endif()

    - name: Build
      shell: cmake -P {0}
      run: |
        # Build library script

        include(ProcessorCount)
        ProcessorCount(N)

        math(EXPR JOBS "${N} + 1")

        if ("${{ runner.os }}" STREQUAL "Windows")
          set(BUILD_COMMMAND msbuild l1bCellML.sln /t:Build /p:Configuration=$ENV{BUILD_TYPE} /m:${N})
        else()
          set(BUILD_COMMMAND make -j ${JOBS})
        endif()

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        execute_process(
          COMMAND ${BUILD_COMMMAND}
          WORKING_DIRECTORY "${ACTION_DIR}/build"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Build failed.")
        endif()

        if ("${{ runner.os }}" STREQUAL "macOS")
          # Have to manipulate the rpath for the Python macOS binaries in the libcellml Python package.
          set(DESIRED_RPATHS "${{ matrix.config.python_rpath }}")
          file(GLOB _TARGET_BINARIES ${ACTION_DIR}/build/src/bindings/python/libcellml/_*.so)
          foreach(_TARGET_BINARY ${_TARGET_BINARIES})
            foreach(DESIRED_RPATH ${DESIRED_RPATHS})
              execute_process(
                COMMAND install_name_tool -add_rpath ${DESIRED_RPATH} ${_TARGET_BINARY}
              )
            endforeach()
            file(GLOB _TARGET_PYTHON_LIBS $ENV{pythonLocation}/lib/libpython*.dylib)
            file(GLOB _STUFF ${ACTION_DIR}/build/src/bindings/python/libcellml/*)
            file(GLOB _OTHER ${DESIRED_RPATHS}/*)
            message(STATUS "==================")
            #message(STATUS "files in libcellml: ${_STUFF}")
            message(STATUS "_OTHER: ${_OTHER}")
            message(STATUS "DESIRED_RPATHS: ${DESIRED_RPATHS}")
            message(STATUS "_TARGET_PYTHON_LIBS: ${_TARGET_PYTHON_LIBS}")
            foreach(_TARGET_PYTHON_LIB ${_TARGET_PYTHON_LIBS})
              execute_process(
                COMMAND install_name_tool -change ${_TARGET_PYTHON_LIB} @rpath/Python ${_TARGET_BINARY}
              )
            endforeach()
          endforeach()
        endif()

    - name: Test
      shell: cmake -P {0}
      run: |
        # Test library script

        include(ProcessorCount)
        ProcessorCount(N)

        math(EXPR JOBS "${N} + 1")

        set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        execute_process(
          COMMAND ${CMAKE_CTEST_COMMAND} -j ${JOBS} -C $ENV{BUILD_TYPE}
          WORKING_DIRECTORY "${ACTION_DIR}/build"
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Tests failed.")
        endif()

    - name: Package
      id: package
      shell: cmake -P {0}
      run: |
        # Package library script

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        execute_process(
          COMMAND ${CMAKE_CPACK_COMMAND} -D PACKAGE_ANY_LINUX=TRUE -C $ENV{BUILD_TYPE}
          WORKING_DIRECTORY "${ACTION_DIR}/build"
          RESULT_VARIABLE result
        )

        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Tests failed.")
        endif()

        file(GLOB _DIST_FILES ${ACTION_DIR}/build/dist/*)
        execute_process(
          COMMAND echo "::set-output name=files::${_DIST_FILES}")

    - name: Deploy Libraries
      id: deploy
      uses: actions/github-script@v3
      if: ${{ matrix.config.deploy_libs }}
      env:
        DATA: ${{ steps.package.outputs.files }}
      with:
        github-token: ${{secrets.ABI_GIT_USER_WRITE_TOKEN}}
        script: |
          // Deploy library script.

          const fs = require('fs');

          let upload_url = context.payload.release.upload_url
          upload_url = upload_url.split('{').shift()

          const files = process.env.DATA.split(';')

          for (let index in files) {
            const assetPath = files[index]
            const assetName = assetPath.split('/').pop();
            const contentLength = filePath => fs.statSync(filePath).size;
            const headers = { 'content-type': 'application/octet-stream', 'content-length': contentLength(assetPath) };
            const upload_url_with_name = upload_url + '?name=' + assetName
            const uploadAssetResponse = await github.repos.uploadReleaseAsset({
              url: upload_url_with_name,
              headers,
              file: fs.readFileSync(assetPath)
            });
          }

    - name: Create Python Package
      shell: bash
      run: |
        # Deploy Python

        python --version
        python -m pip install --upgrade pip
        pip install setuptools twine wheel
        if [ ${{ runner.os }} = Windows ]; then
          cd build/src/bindings/python/Release
        else
          cd build/src/bindings/python
        fi
        python setup.py bdist_wheel

    - name: Test Python Package
      shell: bash
      run: |
        # Test Python Package

        pip install virtualenv
        virtualenv venv_test
        if [ ${{ runner.os }} = Windows ]; then
          whl=`ls build/src/bindings/python/Release/dist/*.whl`
          source venv_test/Scripts/activate
        else
          whl=`ls build/src/bindings/python/dist/*.whl`
          source venv_test/bin/activate
        fi

        pip install $whl
        python -c "import libcellml"

    - name: Upload Python Package
      shell: bash
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        # Upload Python packages

        if [ ${{ runner.os }} = Windows ]; then
          cd build/src/bindings/python/Release
        else
          cd build/src/bindings/python
        fi

        twine upload --skip-existing dist/*
