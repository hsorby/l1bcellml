name: libcellml-deploy-on-release

on:
  release:
    types: # This configuration does not affect the page_build event above
      - created

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Windows Latest MSVC Py38", artifact: "Windows-MSVC.tar.xz",
            os: windows-latest, libxml2_dir: "-DLibXml2_DIR=\"C:/Program Files (x86)/LibXml2/LibXml2/CMake/\"",
            build_type: "Release", cc: "cl", cxx: "cl", python_version: 3.8,
            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
          }
        - {
            name: "Windows Latest MSVC Py37", artifact: "Windows-MSVC-2.tar.xz",
            os: windows-latest, libxml2_dir: "-DLibXml2_DIR=\"C:\\\\Program Files (x86)\\\\LibXml2\\\\LibXml2\\\\CMake\"",
            build_type: "Release", cc: "gcc", cxx: "g++", python_version: 3.7
          }
        - {
            name: "Ubuntu Latest GCC Py36", artifact: "Linux.tar.xz",
            os: ubuntu-latest, swig_executable: "-D SWIG_EXECUTABLE=/usr/local/bin/swig",
            build_type: "Release", cc: "gcc", cxx: "g++", python_version: 3.6
          }
        - {
            name: "macOS Latest Clang Py38", artifact: "macOS.tar.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++", python_version: 3.8
          }
        - {
            name: "macOS Latest Clang Py37", artifact: "macOS.tar-2.xz",
            os: macos-latest,
            build_type: "Release", cc: "clang", cxx: "clang++", python_version: 3.7
          }

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.config.python_version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python_version }}

    - name: Fetch dependencies
      shell: cmake -P {0}
      run: |
        # Fetch dependencies script.

        message(STATUS "Using CMake version: ${CMAKE_VERSION}")
        message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
        message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
        message(STATUS "PWD ENV: $ENV{PWD}")
        message(STATUS "ENV HOME: $ENV{HOME}")
        message(STATUS "ENV GITHUB_HOME: $ENV{GITHUB_HOME}")
        message(STATUS "ENV GITHUB_WORKSPACE: $ENV{GITHUB_WORKSPACE}")

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(zlib_url "https://github.com/OpenCMISS-Dependencies/zlib/archive/develop.zip")
          file(DOWNLOAD "${zlib_url}" "${ACTION_DIR}/zlib-1.2.3.zip" SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/zlib-1.2.3.zip"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${ACTION_DIR}/build-zlib"
            WORKING_DIRECTORY "${ACTION_DIR}")

          set(libxml2_url "https://github.com/OpenCMISS-Dependencies/libxml2/archive/v2.9.6-3.zip")
          file(DOWNLOAD "${libxml2_url}" "${ACTION_DIR}/libxml2-2.9.6-3.zip" SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/libxml2-2.9.6-3.zip"
            COMMAND ${CMAKE_COMMAND} -E make_directory "${ACTION_DIR}/build-libxml2"
            WORKING_DIRECTORY "${ACTION_DIR}")

          set(swig_url "http://prdownloads.sourceforge.net/swig/swigwin-4.0.2.zip")
          file(DOWNLOAD "${swig_url}" "${ACTION_DIR}/swigwin-4.0.2.zip" SHOW_PROGRESS)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/swigwin-4.0.2.zip" WORKING_DIRECTORY "${ACTION_DIR}")

        else()
          set(swig_url "http://prdownloads.sourceforge.net/swig/swig-4.0.2.tar.gz")
          file(DOWNLOAD "${swig_url}" "${ACTION_DIR}/swig-4.0.2.tar.gz" SHOW_PROGRESS)
        endif()

    - name: Prepare environment
      shell: cmake -P {0}
      run: |
        # Prepare environment script.

        message(STATUS "Using CMake version: ${CMAKE_VERSION}")
        message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
        message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")
        message(STATUS "PWD ENV: $ENV{PWD}")
        message(STATUS "ENV HOME: $ENV{HOME}")
        message(STATUS "ENV GITHUB_HOME: $ENV{GITHUB_HOME}")
        message(STATUS "ENV GITHUB_WORKSPACE: $ENV{GITHUB_WORKSPACE}")

        if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          execute_process(
            COMMAND "${{ matrix.config.environment_script }}" && set
            OUTPUT_FILE environment_script_output.txt
          )
          file(STRINGS environment_script_output.txt output_lines)
          foreach(line IN LISTS output_lines)
            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
              set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
            endif()
          endforeach()
          #file(APPEND "$ENV{PATH}" "$ENV{HOME}/swigwin-4.0.2")
        else()
          #file(APPEND "$ENV{PATH}" "$ENV{HOME}/swig-4.0.2")
        endif()

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if ("${{ runner.os }}" STREQUAL "Windows")
          execute_process(COMMAND dir WORKING_DIRECTORY "${ACTION_DIR}")
          execute_process(COMMAND "${ACTION_DIR}/swigwin-4.0.2/bin/swig" --version)
          execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory "${ACTION_DIR}/build-zlib")
          execute_process(COMMAND echo "${CMAKE_COMMAND} -S ${ACTION_DIR}/zlib-develop -B ${ACTION_DIR}/build-zlib")
          execute_process(COMMAND ${CMAKE_COMMAND} -S "${ACTION_DIR}/zlib-develop" -B "${ACTION_DIR}/build-zlib"
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND ${CMAKE_COMMAND} --build "${ACTION_DIR}/build-zlib" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-zlib"
            COMMAND_ECHO STDOUT
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND ${CMAKE_COMMAND} --install "${ACTION_DIR}/build-zlib" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-zlib"
            COMMAND_ECHO STDOUT
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND ${CMAKE_COMMAND} -S "${ACTION_DIR}/libxml2-2.9.6-3" -B "${ACTION_DIR}/build-libxml2"
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2"
            COMMAND_ECHO STDOUT
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND ${CMAKE_COMMAND} --build "${ACTION_DIR}/build-libxml2" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2"
            COMMAND_ECHO STDOUT
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND ${CMAKE_COMMAND} --install "${ACTION_DIR}/build-libxml2" --config Release
            WORKING_DIRECTORY "${ACTION_DIR}/build-libxml2"
            COMMAND_ECHO STDOUT
            OUTPUT_VARIABLE OUTPUT_CONTENTS
            ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND dir WORKING_DIRECTORY "${ACTION_DIR}")
          execute_process(COMMAND dir WORKING_DIRECTORY "${ACTION_DIR}/swigwin-4.0.2")
          execute_process(COMMAND dir WORKING_DIRECTORY "${ACTION_DIR}/swigwin-4.0.2/bin")
          execute_process(COMMAND dir WORKING_DIRECTORY "C:/Program Files (x86)/LibXml2/LibXml2/CMake/")
          execute_process(COMMAND echo "========= All done ==========")
        else()
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf "${ACTION_DIR}/swig-4.0.2.tar.gz")
          execute_process(COMMAND ./configure WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2" COMMAND_ECHO STDOUT OUTPUT_VARIABLE OUTPUT_CONTENTS ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND make WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2" COMMAND_ECHO STDOUT OUTPUT_VARIABLE OUTPUT_CONTENTS ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
          execute_process(COMMAND sudo make install WORKING_DIRECTORY "${ACTION_DIR}/swig-4.0.2" COMMAND_ECHO STDOUT OUTPUT_VARIABLE OUTPUT_CONTENTS ERROR_VARIABLE ERROR_CONTENTS)
          message(STATUS "=================")
          message(STATUS OUTPUT_CONTENTS: ${OUTPUT_CONTENTS})
          message(STATUS ERROR_CONTENTS: ${ERROR_CONTENTS})
          message(STATUS "=================")
        endif()


    - name: Configure
      shell: cmake -P {0}
      run: |
        # Configure library script

        message(STATUS "${{ runner.os }}")
        message(STATUS "Using CMake version: ${CMAKE_VERSION}")
        message(STATUS "CMAKE_CURRENT_SOURCE_DIR: ${CMAKE_CURRENT_SOURCE_DIR}")
        message(STATUS "CMAKE_CURRENT_BINARY_DIR: ${CMAKE_CURRENT_BINARY_DIR}")

        set(ENV{CC} ${{ matrix.config.cc }})
        set(ENV{CXX} ${{ matrix.config.cxx }})

        set(ACTION_DIR ${CMAKE_CURRENT_BINARY_DIR})
        if (NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          message(STATUS "we are on windows with environement script.")
        else()
          message(STATUS "no windows here.")
        endif()
        if ("${{ runner.os }}" STREQUAL "Windows")# AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
          #execute_process(
          #  COMMAND "${{ matrix.config.environment_script }}" && set
          #  OUTPUT_FILE environment_script_output.txt
          #)
          #file(STRINGS environment_script_output.txt output_lines)
          #foreach(line IN LISTS output_lines)
          #  if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
          #    set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
          #  endif()
          #endforeach()
          set(LIBXML2_CONFIGURE_STR "-D LIBXML2_DIR=\"C:/Program Files (x86)/LibXml2/LibXml2/CMake/\"")
          set(LIBXML2_CONFIGURE_STR_2 "-D LibXml2_DIR=\"C:/Program Files (x86)/LibXml2/LibXml2/CMake/\"")
          execute_process(COMMAND dir WORKING_DIRECTORY "C:/Program Files (x86)/LibXml2/LibXml2/CMake/")
          execute_process(COMMAND dir WORKING_DIRECTORY "${ACTION_DIR}/swigwin-4.0.2/")
          execute_process(COMMAND dir WORKING_DIRECTORY "C:/Program Files (x86)/LibXml2/LibXml2/CMake/")
          message(STATUS "-------- 03")
          set(ENV{PATH} "${ACTION_DIR}/swigwin-4.0.2;$ENV{PATH}")
          execute_process(COMMAND where python${{ matrix.config.python_version }} OUTPUT_VARIABLE OUTPUT_CONTENTS)
          if (OUTPUT_CONTENTS)
            message(STATUS "Where said we should try this Python executable: ${OUTPUT_CONTENTS}")
          endif()
        else()
          message(STATUS "-------- 04")
          execute_process(COMMAND which python${{ matrix.config.python_version }} OUTPUT_VARIABLE PYTHON_EXE)
          if (PYTHON_EXE)
            message(STATUS "Should try this Python executable: ${PYTHON_EXE}")
            set(PYTHON_CFG "-D Python_EXECUTABLE=${PYTHON_EXE}")
          endif()
        endif()

        message(STATUS "PATH: $ENV{PATH}")
        execute_process(COMMAND dir "${ACTION_DIR}/swigwin-4.0.2/")
        execute_process(COMMAND echo "========33===========")
        execute_process(COMMAND python${{ matrix.config.python_version }} --version)
        execute_process(COMMAND echo "========66===========")

        execute_process(
          COMMAND ${CMAKE_COMMAND}
            -S .
            -B build
            -D BUILD_TYPE=$ENV{BUILD_TYPE}
            ${PYTHON_CFG}
            ${{ matrix.config.libxml2_dir }}
            ${{ matrix.config.swig_executable }}
          RESULT_VARIABLE result
        )
        if (NOT result EQUAL 0)
          message(FATAL_ERROR "Bad exit status")
        endif()


