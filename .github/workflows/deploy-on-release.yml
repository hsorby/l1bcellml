name: libcellml-deploy-on-release

on:
  push

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: 10.15

jobs:
  wheels:
    name: ${{ matrix.name }} ${{ matrix.py }} wheels
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-12, ubuntu-20.04, windows-2019]
        py: ['3.7', '3.8', '3.9', '3.10']
        include:
          - name: 'Windows'
            os: windows-2019
          - name: 'Linux'
            os: ubuntu-20.04
          - name: 'macOS'
            os: macos-12
        exclude:
          - os: macos-12
            py: '3.7'

    steps:
      - name: Check out libCellML
        uses: actions/checkout@v2
        with:
          ref: main

      - name: Setup for cibuildwheel
        id: setup
        shell: bash
        run: |
          mkdir src/bindings/python/libcellml
          cp src/bindings/python/README.rst src/bindings/python/libcellml/README.rst
          mv src/bindings/python/cibuildwheel.setup.py src/bindings/python/setup.py
          v=${{ matrix.py }}
          echo "Setting tag as: TAG=${GITHUB_REF#refs/tags/}"
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}
          #echo ::set-output name=TAG::v0.2.0-dev.21
          echo "Setting build as: BUILD=cp${v/./}-*"
          echo ::set-output name=BUILD::cp${v/./}-*
          if [[ "macOS" == "${{ matrix.name }}" ]]; then
            if [[ "${{ matrix.py }}" == "3.8" ]]; then
              echo "Setting MACOS_ARCHS as: MACOS_ARCHS='x86_64'"
              echo ::set-output name=MACOS_ARCHS::x86_64
            else
              echo "Setting MACOS_ARCHS as: MACOS_ARCHS='x86_64 arm64'"
              echo ::set-output name=MACOS_ARCHS::"x86_64 arm64"
            fi
          else
            echo "Setting MACOS_ARCHS as: MACOS_ARCHS='x86_64'"
            echo ::set-output name=MACOS_ARCHS::x86_64
          fi

      - name: Configure MSVC
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel==2.8.1

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse src/bindings/python/
        env:
          #CIBW_BUILD_VERBOSITY: 1
          CIBW_ARCHS: auto64
          CIBW_ARCHS_MACOS: ${{ steps.setup.outputs.macos_archs }}
          CIBW_BUILD: ${{ steps.setup.outputs.build }}
          CIBW_TEST_SKIP: "*_arm64"
          CIBW_BEFORE_ALL_LINUX: yum install -y libxml2-devel || (apk add libxml2-dev && rm /usr/lib/cmake/libxml2/libxml2-config.cmake)
          CIBW_BEFORE_ALL_WINDOWS: cd src/bindings/python && cmake -S wheel_dependencies -B build-wheel_dependencies -G Ninja && cd build-wheel_dependencies && ninja
          CIBW_ENVIRONMENT: LIBCELLML_VERSION_TAG=${{ steps.setup.outputs.tag }}
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=10.15
            LIBCELLML_VERSION_TAG=${{ steps.setup.outputs.tag }}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
          CIBW_BEFORE_BUILD_LINUX: pip install renamewheel
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: renamewheel -w {dest_dir} {wheel}

      - name: Upload Python wheels as artifacts
        uses: actions/upload-artifact@v3
        with:
          path: ./wheelhouse/*.whl

