name: libcellml-create-python-3.9-wheel

on: push

env:
  BUILD_TYPE: Release
  MACOSX_DEPLOYMENT_TARGET: 10.14

jobs:
  many-linux-wheels:
    name: ${{ matrix.config.name }}
    runs-on: ubuntu-20.04
    container: quay.io/pypa/manylinux2014_x86_64
    env:
      DOWNLOADS_DIR: /home/downloads
      WORK_DIR: /home/work
      SRC_DIR: /home/src
      LD_LIBRARY_PATH: /usr/local/lib:/lib64
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Many Linux 2014 Py39", cc: "cl", cxx: "cl",
            python_version: 3.9, python_full_version: 3.9.5, python_patch_file: "Modules/Setup",
            python_tarball: "https://www.python.org/ftp/python/3.9.5/Python-3.9.5.tgz"
          }
    steps:
    - name: Download source code
      shell: bash
      run: |
        mkdir $DOWNLOADS_DIR
        mkdir $WORK_DIR
        mkdir $SRC_DIR
        # fetch libraries
        git clone https://github.com/cellml/libcellml -b release --depth 1 $SRC_DIR/libcellml
        git clone https://github.com/OpenCMISS-Dependencies/zlib -b v1.2.3 --depth 1 $SRC_DIR/zlib
        git clone https://github.com/OpenCMISS-Dependencies/libxml2 -b v2.9.10 --depth 1 $SRC_DIR/libxml2
        curl -L https://cfhcable.dl.sourceforge.net/project/swig/swig/swig-4.0.2/swig-4.0.2.tar.gz > $DOWNLOADS_DIR/swig-4.0.2.tar.gz
        curl -L ${{ matrix.config.python_tarball }} > $DOWNLOADS_DIR/Python.tar.gz
        curl -L https://www.openssl.org/source/openssl-1.1.1h.tar.gz > $DOWNLOADS_DIR/openssl-1.1.1h.tar.gz
        curl -L ftp://sourceware.org/pub/libffi/libffi-3.2.1.tar.gz > $DOWNLOADS_DIR/libffi-3.2.1.tar.gz
    - name: Extract source code
      shell: bash
      run: |
        cd $SRC_DIR
        tar -xzf $DOWNLOADS_DIR/swig-4.0.2.tar.gz
        tar -xzf $DOWNLOADS_DIR/openssl-1.1.1h.tar.gz
        tar -xzf $DOWNLOADS_DIR/libffi-3.2.1.tar.gz
        tar -xzf $DOWNLOADS_DIR/Python.tar.gz
    - name: Build and instal zlib
      shell: bash
      run: |
        # build libraries
        cmake -S $SRC_DIR/zlib -B $WORK_DIR/build-zlib -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTS=OFF
        cd $WORK_DIR/build-zlib
        make -j3
        make install
    - name: Build and instal libXml2
      shell: bash
      run: |
        cmake -S $SRC_DIR/libxml2 -B $WORK_DIR/build-libxml2 -D CMAKE_BUILD_TYPE=Release  -D CMAKE_BUILD_TYPE=Release -D BUILD_SHARED_LIBS=OFF -D LIBXML2_BUILD_TESTS=OFF -D LIBXML2_WITH_LZMA=OFF -D LIBXML2_WITH_PYTHON=OFF -D LIBXML2_WITH_ICONV=OFF -D LIBXML2_WITH_PROGRAMS=OFF -D LIBXML2_WITH_TESTS=OFF
        cd $WORK_DIR/build-libxml2
        make -j3
        make install
    - name: Build and instal openssl
      shell: bash
      run: |
        mkdir $WORK_DIR/build-openssl
        cd $WORK_DIR/build-openssl
        $SRC_DIR/openssl-1.1.1h/config --libdir=/usr/local/lib
        make -j3
        make install_sw
    - name: Build and instal libffi
      if: false
      shell: bash
      run: |
        mkdir $WORK_DIR/build-libffi-3.2.1
        cd $WORK_DIR/build-libffi-3.2.1
        $SRC_DIR/libffi-3.2.1/configure --without-docs  --libdir=/usr/local/lib
        make -j3
        make install
        cd /usr/local/lib
        ln -s /usr/local/lib64/libffi.so
        ln -s /usr/local/lib64/libffi.la
    - name: Build and instal Python
      shell: bash
      run: |
        cd $SRC_DIR/Python*
        curl -L https://gist.githubusercontent.com/hsorby/6481eed3abb20cf3cfe6bdc7a9c852d9/raw/4701096ce95130eb239945bb7875fdd9ab33bfde/python-${{ matrix.config.python_full_version }}.patch > patch.txt
        patch -i patch.txt ${{ matrix.config.python_patch_file }}
        ./configure --enable-shared --enable-optimizations --with-openssl=/usr/local/ --with-system-ffi
        make -j3 build_all 
        make altinstall
    - name: Build and instal swig
      shell: bash
      run: |
        mkdir $WORK_DIR/build-swig
        cd $WORK_DIR/build-swig
        $SRC_DIR/swig-4.0.2/configure
        make -j3
        make install
    - name: Build libcellml
      shell: bash
      run: |
        cmake -S $SRC_DIR/libcellml -B $WORK_DIR/build-libcellml -D COVERAGE=OFF -D BUILD_TYPE=Release
        cd $WORK_DIR/build-libcellml
        make -j3
    - name: Test
      shell: bash
      run: |
        cd $WORK_DIR/build-libcellml
        make test
    - name: Create Python Package
      shell: bash
      run: |
        # Create Python Package
        python${{ matrix.config.python_version }} -m pip install --upgrade pip
        pip${{ matrix.config.python_version }} install setuptools twine wheel auditwheel
        cd $WORK_DIR/build-libcellml/src/bindings/python
        python${{ matrix.config.python_version }} setup.py bdist_wheel
    - name: Test Python Package
      shell: bash
      run: |
        # Test Python Package
        cd $WORK_DIR/build-libcellml/src/bindings/python
        python${{ matrix.config.python_version }} -m venv $WORK_DIR/venv_test
        source $WORK_DIR/venv_test/bin/activate
        whl=`ls $WORK_DIR/build-libcellml/src/bindings/python/dist/*.whl`
        auditwheel repair $whl
        whl=`ls $WORK_DIR/build-libcellml/src/bindings/python/wheelhouse/*.whl`
        pip install $whl
        python -c "import libcellml"
        
